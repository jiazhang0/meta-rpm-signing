From a226206800cd701d005d1029c631837d2309a121 Mon Sep 17 00:00:00 2001
From: jbj <jbj>
Date: Wed, 23 Apr 2014 22:20:03 +0000
Subject: [PATCH 05/46] - rsa: fix: lookup pubkey before finalizing context
 (for PKCS1).

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>
Signed-off-by: Randy MacLeod <Randy.MacLeod@windriver.com>
---
 CHANGES           |  1 +
 rpmdb/signature.c | 15 ++++++++++-----
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/CHANGES b/CHANGES
index 5447c31..b6ddc5f 100644
--- a/CHANGES
+++ b/CHANGES
@@ -113,6 +113,7 @@
     - mdawkins: start rpm-5.4.10 development.
 
 Backports:
+    - jbj: rsa: fix: lookup pubkey before finalizing context (for PKCS1).
     - jbj: ssl: rewrite to use the higher level EVP layer, haul the trash.
     - jbj: ssl: tweak config options, run in FIPS-140-2 mode "best effort".
     - jbj: pgp: permit non-repudiable signature on all crypto stacks.
diff --git a/rpmdb/signature.c b/rpmdb/signature.c
index 016e8d1..bdd1cc6 100644
--- a/rpmdb/signature.c
+++ b/rpmdb/signature.c
@@ -764,6 +764,12 @@ assert(sigp->hash_algo == (rpmuint8_t)rpmDigestAlgo(rsactx));
 assert(pgpGetSigtag(dig) == RPMSIGTAG_RSA);
 assert(sig != NULL);
 
+    /* Retrieve the matching public key. */
+    /* XXX FIXME: this needs to be done early for SetRSA() PKCS1 generation. */
+    res = (rpmRC) pgpFindPubkey(dig);
+    if (res != RPMRC_OK)
+	goto exit;
+
     *t = '\0';
     if (dig->hdrctx == rsactx)
 	t = stpcpy(t, _("Header "));
@@ -811,11 +817,6 @@ assert(sig != NULL);
 	}
     }
 
-    /* Retrieve the matching public key. */
-    res = (rpmRC) pgpFindPubkey(dig);
-    if (res != RPMRC_OK)
-	goto exit;
-
     /* Verify the RSA signature. */
     {	rpmop op = (rpmop)pgpStatsAccumulator(dig, 11);	/* RPMTS_OP_SIGNATURE */
 	(void) rpmswEnter(op, 0);
@@ -949,6 +950,7 @@ rpmVerifySignature(void * _dig, char * result)
     rpmuint32_t siglen = pgpGetSiglen(dig);
     rpmSigTag sigtag = (rpmSigTag) pgpGetSigtag(dig);
     rpmRC res;
+pgpDigParams pubp = NULL;
 
 if (_rpmhkp_debug)
 fprintf(stderr, "--> %s(%p,%p) sig %p[%u]\n", __FUNCTION__, _dig, result, sig, siglen);
@@ -959,6 +961,7 @@ fprintf(stderr, "--> %s(%p,%p) sig %p[%u]\n", __FUNCTION__, _dig, result, sig, s
 	goto exit;
     }
 
+pubp = pgpGetPubkey(dig);
     switch (sigtag) {
     case RPMSIGTAG_SIZE:
 	res = verifySize(dig, result);
@@ -970,9 +973,11 @@ fprintf(stderr, "--> %s(%p,%p) sig %p[%u]\n", __FUNCTION__, _dig, result, sig, s
 	res = verifySHA1(dig, result, dig->hdrsha1ctx);
 	break;
     case RPMSIGTAG_RSA:
+pubp->pubkey_algo = PGPPUBKEYALGO_RSA;
 	res = verifyRSA(dig, result, dig->hdrctx);
 	break;
     case RPMSIGTAG_DSA:
+pubp->pubkey_algo = PGPPUBKEYALGO_DSA;
 	res = verifyDSA(dig, result, dig->hdrsha1ctx);
 	break;
     default:
-- 
2.0.1

