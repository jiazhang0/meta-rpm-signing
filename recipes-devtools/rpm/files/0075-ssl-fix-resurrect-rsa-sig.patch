ssl: fix: resurrect rsa signature leading zero bytes.

Backport from RPM 5.4.16.

If an RSA signature starts with '\00' RPM treats it as invalid, correct this
issue.

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>

Index: rpm-5.4.14/CHANGES
===================================================================
--- rpm-5.4.14.orig/CHANGES
+++ rpm-5.4.14/CHANGES
@@ -1,3 +1,4 @@
+    - jbj: ssl: fix: resurrect rsa signature leading zero bytes.
     - jbj: lua: fix: resurrect output capture with lua-5.2.
     - jbj: verify: fix: broken logic for %ghost avoidance (Mark Hatle).
 
Index: rpm-5.4.14/rpmio/rpmssl.c
===================================================================
--- rpm-5.4.14.orig/rpmio/rpmssl.c
+++ rpm-5.4.14/rpmio/rpmssl.c
@@ -509,11 +509,46 @@ assert(ssl->nbits);
 	    rc = 1;
 	break;
     case PGPPUBKEYALGO_DSA:
-if (ssl->nbits == 0) ssl->nbits = 1024;	/* XXX FIXME */
+	/* XXX Set the no. of qbits based on the digest being used. */
+	if (ssl->qbits == 0)
+	switch (sigp->hash_algo) {
+	default:	/* XXX default */
+	case PGPHASHALGO_SHA1:		ssl->qbits = 160;	break;
+	case PGPHASHALGO_SHA224:	ssl->qbits = 224;	break;
+	case PGPHASHALGO_SHA256:	ssl->qbits = 256;	break;
+#ifdef	PAINFUL	/* XXX openssl-1.0.1e-16 permits only {160,224,256} */
+	case PGPHASHALGO_SHA384:	ssl->qbits = 384;	break;
+	case PGPHASHALGO_SHA512:	ssl->qbits = 512;	break;
+#else
+	case PGPHASHALGO_SHA384:	ssl->qbits = 256;	break;
+	case PGPHASHALGO_SHA512:	ssl->qbits = 256;	break;
+#endif
+	}
+assert(ssl->qbits);
+
+	/* XXX Set the no. of nbits for non-truncated digest in use. */
+	if (ssl->nbits == 0)
+	switch (ssl->qbits) {
+	default:	/* XXX default */
+	case 160:	ssl->nbits = 1024;	break;
+	case 224:	ssl->nbits = 2048;	break;
+#ifdef	PAINFUL
+	case 256:	ssl->nbits = 3072;	break;
+	case 384:	ssl->nbits = 7680;	break;
+	case 512:	ssl->nbits = 15360;	break;
+#else
+	case 256:	ssl->nbits = 2048;	break;
+	case 384:	ssl->nbits = 2048;	ssl->qbits = 256;	break;
+	case 512:	ssl->nbits = 2048;	ssl->qbits = 256;	break;
+#endif
+	}
 assert(ssl->nbits);
+
 	if ((ctx = EVP_PKEY_CTX_new_id(EVP_PKEY_DSA, NULL)) == NULL
 	 || EVP_PKEY_paramgen_init(ctx) != 1
 	 || EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, ssl->nbits) != 1
+	 || EVP_PKEY_CTX_ctrl(ctx, EVP_PKEY_DSA, EVP_PKEY_OP_PARAMGEN,
+		EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS, ssl->qbits, NULL) != 1
 	 || EVP_PKEY_paramgen(ctx, &param) != 1)
 	    goto exit;
 	EVP_PKEY_CTX_free(ctx);
@@ -621,6 +656,7 @@ int rpmsslMpiItem(/*@unused@*/ const cha
     unsigned int nb = (pend >= p ? (pend - p) : 0);
     unsigned int mbits = (((8 * (nb - 2)) + 0x1f) & ~0x1f);
     unsigned char * q;
+    unsigned int nz;
     int rc = 0;
     int xx;
 
@@ -633,7 +669,11 @@ assert(0);
 assert(ssl->sig == NULL);
 	ssl->nbits = mbits;
 	ssl->siglen = mbits/8;
-	ssl->sig = memcpy(xmalloc(nb-2), p+2, nb-2);
+	ssl->sig = xmalloc(ssl->siglen);
+	nz = ssl->siglen - (nb - 2);
+	if (nz)		/* XXX resurrect leading zero bytes. */
+	    memset(ssl->sig, 0, nz);
+	memcpy(ssl->sig+nz, p+2, nb-2);
 	break;
     case 20:		/* DSA r */
 assert(ssl->dsasig == NULL);
