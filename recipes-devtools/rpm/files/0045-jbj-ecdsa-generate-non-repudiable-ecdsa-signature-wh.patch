From cba7a287e5336d18fafda242d4a0c0a1eb7c09c2 Mon Sep 17 00:00:00 2001
From: jbj <jbj>
Date: Mon, 5 May 2014 19:48:41 +0000
Subject: [PATCH 31/46] - jbj: ecdsa: generate non-repudiable ecdsa signature
 when building.

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>
Signed-off-by: Randy MacLeod <Randy.MacLeod@windriver.com>
---
 CHANGES                   |  4 +++-
 build/build.c             | 10 ++++++++--
 build/pack.c              |  7 +++++--
 macros/macros.in          |  9 +++++----
 macros/macros.rpmbuild.in |  7 +++++--
 5 files changed, 26 insertions(+), 11 deletions(-)

diff --git a/CHANGES b/CHANGES
index 5733bc6..c083698 100644
--- a/CHANGES
+++ b/CHANGES
@@ -113,7 +113,9 @@
     - mdawkins: start rpm-5.4.10 development.
 
 Backports:
-    - jbj: pgp: fix: rescusitate.
+    - jbj: ecdsa: generate non-repudiable ecdsa signature when building.
+    - jbj: ecdsa: implement RPMSIGTAG_ECDSA/RPMTAG_ECDSAHEAER use.
+    - jbj: pgp: fix: rescusitate clear/detached signing.
     - jbj: pgp: validate pubkey binding signatures w clear/detached signing.
     - jbj: ecdsa: define RPMSIGTAG_ECDSA/RPMTAG_ECDSAHEADER.
     - jbj: pgp: refactor some table lookup helpers.
diff --git a/build/build.c b/build/build.c
index 875bfdf..9e283b1 100644
--- a/build/build.c
+++ b/build/build.c
@@ -340,8 +340,14 @@ rpmRC buildSpec(rpmts ts, Spec spec, int what, int test)
     rpmRC rc = RPMRC_OK;
 
     /* Generate a keypair lazily. */
-    if (spec->dig == NULL)
-	spec->dig = pgpDigNew(RPMVSF_DEFAULT, PGPPUBKEYALGO_DSA);
+assert(spec->dig == NULL);
+    spec->dig = pgpDigNew(RPMVSF_DEFAULT, PGPPUBKEYALGO_UNKNOWN);
+    {	int xx;
+	xx = pgpDigSetAlgos(spec->dig);
+	xx = pgpImplGenerate(spec->dig);
+assert(xx == 1);
+	xx = pgpExportPubkey(spec->dig);
+    }
 
     if (!spec->recursing && spec->BACount) {
 	int x;
diff --git a/build/pack.c b/build/pack.c
index 641abe3..d6a917b 100644
--- a/build/pack.c
+++ b/build/pack.c
@@ -830,10 +830,10 @@ assert(fd->ndigests == 2);
 	(void) Fflush(fd);
     }
 
-    {	/* XXX Dupe the header hash for the RFC 2440/4880 signature. */
+    {	/* XXX Dupe the header digest for the non-repudiable signature. */
 	DIGEST_CTX ctx = (dig ? rpmDigestDup(fd->digests[fd->ndigests-1]) : NULL);
 
-	/* Finalize the header SHA1. */
+	/* Finalize the header signature digest. */
 	/* XXX FIXME: get binary octets, not ASCII. */
 	fdFiniDigest(fd, PGPHASHALGO_SHA1, &SHA1, NULL, 1);
 
@@ -885,6 +885,9 @@ assert(0);
 	case PGPPUBKEYALGO_DSA:
 	    he->tag = (rpmTag) RPMSIGTAG_DSA;
 	    break;
+	case PGPPUBKEYALGO_ECDSA:
+	    he->tag = (rpmTag) RPMSIGTAG_ECDSA;
+	    break;
 	}
 	he->t = RPM_BIN_TYPE;
 	he->p.ptr = (void *) dig->sig;
diff --git a/macros/macros.in b/macros/macros.in
index 22408b2..1a9a201 100644
--- a/macros/macros.in
+++ b/macros/macros.in
@@ -519,7 +519,7 @@ $_arbitrary_tags_tests	Foo:Bar
 #	pgps +batchmode=on +verbose=0 +armor=off \
 #	"+myname=%{_pgp_name}" -b %{__plaintext_filename} -o %{__signature_filename}
 
-# rpm-5.0 and later verifies signatures internally using beecrypt/NSS/openssl
+# rpm-5.0 and later verifies signatures internally
 #%__gpg_verify_cmd		%{__gpg} \
 #	gpg --batch --no-verbose --verify --no-secmem-warning \
 #	%{__signature_filename} %{__plaintext_filename}
@@ -565,8 +566,8 @@ $_arbitrary_tags_tests	Foo:Bar
 %_transaction_color	@RPMCANONCOLOR@
 
 #	A default autorelocation path prefixed to file paths of packages
-#	that have an incompatible arch. This is used on ia64 to prefix
-#	/emul/ia32 to i386 file paths, and nowhere else (yet).
+#	that have an incompatible arch. This was used on ia64 to prefix
+#	/emul/ia32 to i386 file paths, and nowhere else.
 #
 # XXX	Note: escaped %% for use in headerSprintf()
 #%_autorelocate_path	@autorelocate_path@
diff --git a/macros/macros.rpmbuild.in b/macros/macros.rpmbuild.in
index 49dae5d..783aa8b 100644
--- a/macros/macros.rpmbuild.in
+++ b/macros/macros.rpmbuild.in
@@ -265,14 +265,17 @@ echo "Patch #%{__patch_number} (%{basename:%{__patch_file}}):" && ( %{uncompress
 #
 # Choose the non-repudiable signature algorithm:
 # 	DSA		(default)
-# 	DSA/SHA224
-# 	DSA/SHA256
 # 	RSA		(implies SHA1)
+# 	ECDSA		(implies SHA256)
 # 	RSA/SHA1
 # 	RSA/SHA224
 # 	RSA/SHA256
 # 	RSA/SHA384
 # 	RSA/SHA512
+# 	ECDSA/SHA224	(using NIST P-224)
+# 	ECDSA/SHA256	(using NIST P-256)
+# 	ECDSA/SHA384	(using NIST P-385)
+# 	ECDSA/SHA512	(using NIST P-521)
 #
 %_build_sign	DSA
 
-- 
2.0.1

